//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  materials: Materials;
  materialsConnection: MaterialsConnection;
  cases: Cases;
  casesConnection: CasesConnection;
  modules: Modules;
  modulesConnection: ModulesConnection;
  exercises: Exercises;
  exercisesConnection: ExercisesConnection;
  resources: Resources;
  resourcesConnection: ResourcesConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryMaterialsArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryMaterialsConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<MaterialsFilter>;
};


export type QueryCasesArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryCasesConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<CasesFilter>;
};


export type QueryModulesArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryModulesConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ModulesFilter>;
};


export type QueryExercisesArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryExercisesConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ExercisesFilter>;
};


export type QueryResourcesArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryResourcesConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ResourcesFilter>;
};

export type DocumentFilter = {
  materials?: InputMaybe<MaterialsFilter>;
  cases?: InputMaybe<CasesFilter>;
  modules?: InputMaybe<ModulesFilter>;
  exercises?: InputMaybe<ExercisesFilter>;
  resources?: InputMaybe<ResourcesFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
};

export type DocumentNode = Materials | Cases | Modules | Exercises | Resources;

export type MaterialsObjectives = {
  __typename?: 'MaterialsObjectives';
  objective?: Maybe<Scalars['String']>;
  explanation?: Maybe<Scalars['String']>;
};

export type MaterialsComponentsModuleFilename = Modules;

export type MaterialsComponentsModule = {
  __typename?: 'MaterialsComponentsModule';
  title?: Maybe<Scalars['String']>;
  filename?: Maybe<MaterialsComponentsModuleFilename>;
};

export type MaterialsComponentsCaseFilename = Cases;

export type MaterialsComponentsCase = {
  __typename?: 'MaterialsComponentsCase';
  title?: Maybe<Scalars['String']>;
  filename?: Maybe<MaterialsComponentsCaseFilename>;
};

export type MaterialsComponentsExerciseFilename = Exercises;

export type MaterialsComponentsExercise = {
  __typename?: 'MaterialsComponentsExercise';
  title?: Maybe<Scalars['String']>;
  filename?: Maybe<MaterialsComponentsExerciseFilename>;
};

export type MaterialsComponents = MaterialsComponentsModule | MaterialsComponentsCase | MaterialsComponentsExercise;

export type Materials = Node & Document & {
  __typename?: 'Materials';
  title?: Maybe<Scalars['String']>;
  linktitle?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['Float']>;
  objectives?: Maybe<Array<Maybe<MaterialsObjectives>>>;
  body?: Maybe<Scalars['String']>;
  components?: Maybe<Array<Maybe<MaterialsComponents>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']>;
  lte?: InputMaybe<Scalars['Float']>;
  gte?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  eq?: InputMaybe<Scalars['Float']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
};

export type MaterialsObjectivesFilter = {
  objective?: InputMaybe<StringFilter>;
  explanation?: InputMaybe<StringFilter>;
};

export type MaterialsComponentsModuleFilenameFilter = {
  modules?: InputMaybe<ModulesFilter>;
};

export type MaterialsComponentsModuleFilter = {
  title?: InputMaybe<StringFilter>;
  filename?: InputMaybe<MaterialsComponentsModuleFilenameFilter>;
};

export type MaterialsComponentsCaseFilenameFilter = {
  cases?: InputMaybe<CasesFilter>;
};

export type MaterialsComponentsCaseFilter = {
  title?: InputMaybe<StringFilter>;
  filename?: InputMaybe<MaterialsComponentsCaseFilenameFilter>;
};

export type MaterialsComponentsExerciseFilenameFilter = {
  exercises?: InputMaybe<ExercisesFilter>;
};

export type MaterialsComponentsExerciseFilter = {
  title?: InputMaybe<StringFilter>;
  filename?: InputMaybe<MaterialsComponentsExerciseFilenameFilter>;
};

export type MaterialsComponentsFilter = {
  module?: InputMaybe<MaterialsComponentsModuleFilter>;
  case?: InputMaybe<MaterialsComponentsCaseFilter>;
  exercise?: InputMaybe<MaterialsComponentsExerciseFilter>;
};

export type MaterialsFilter = {
  title?: InputMaybe<StringFilter>;
  linktitle?: InputMaybe<StringFilter>;
  published?: InputMaybe<BooleanFilter>;
  type?: InputMaybe<StringFilter>;
  weight?: InputMaybe<NumberFilter>;
  objectives?: InputMaybe<MaterialsObjectivesFilter>;
  body?: InputMaybe<StringFilter>;
  components?: InputMaybe<MaterialsComponentsFilter>;
};

export type MaterialsConnectionEdges = {
  __typename?: 'MaterialsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Materials>;
};

export type MaterialsConnection = Connection & {
  __typename?: 'MaterialsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<MaterialsConnectionEdges>>>;
};

export type CasesSources = {
  __typename?: 'CasesSources';
  source_name?: Maybe<Scalars['String']>;
  source_url?: Maybe<Scalars['String']>;
  license?: Maybe<Scalars['String']>;
  attribution?: Maybe<Scalars['String']>;
};

export type Cases = Node & Document & {
  __typename?: 'Cases';
  style?: Maybe<Scalars['String']>;
  short?: Maybe<Scalars['String']>;
  reporter?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  public?: Maybe<Scalars['Boolean']>;
  sources?: Maybe<Array<Maybe<CasesSources>>>;
  body?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type CasesSourcesFilter = {
  source_name?: InputMaybe<StringFilter>;
  source_url?: InputMaybe<StringFilter>;
  license?: InputMaybe<StringFilter>;
  attribution?: InputMaybe<StringFilter>;
};

export type CasesFilter = {
  style?: InputMaybe<StringFilter>;
  short?: InputMaybe<StringFilter>;
  reporter?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  public?: InputMaybe<BooleanFilter>;
  sources?: InputMaybe<CasesSourcesFilter>;
  body?: InputMaybe<StringFilter>;
};

export type CasesConnectionEdges = {
  __typename?: 'CasesConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Cases>;
};

export type CasesConnection = Connection & {
  __typename?: 'CasesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<CasesConnectionEdges>>>;
};

export type Modules = Node & Document & {
  __typename?: 'Modules';
  title?: Maybe<Scalars['String']>;
  short?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  body?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type ModulesFilter = {
  title?: InputMaybe<StringFilter>;
  short?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  body?: InputMaybe<StringFilter>;
};

export type ModulesConnectionEdges = {
  __typename?: 'ModulesConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Modules>;
};

export type ModulesConnection = Connection & {
  __typename?: 'ModulesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ModulesConnectionEdges>>>;
};

export type Exercises = Node & Document & {
  __typename?: 'Exercises';
  title?: Maybe<Scalars['String']>;
  short?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  body?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type ExercisesFilter = {
  title?: InputMaybe<StringFilter>;
  short?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  body?: InputMaybe<StringFilter>;
};

export type ExercisesConnectionEdges = {
  __typename?: 'ExercisesConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Exercises>;
};

export type ExercisesConnection = Connection & {
  __typename?: 'ExercisesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ExercisesConnectionEdges>>>;
};

export type Resources = Node & Document & {
  __typename?: 'Resources';
  title?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  summary?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type ResourcesFilter = {
  title?: InputMaybe<StringFilter>;
  date?: InputMaybe<StringFilter>;
  summary?: InputMaybe<StringFilter>;
  body?: InputMaybe<StringFilter>;
};

export type ResourcesConnectionEdges = {
  __typename?: 'ResourcesConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Resources>;
};

export type ResourcesConnection = Connection & {
  __typename?: 'ResourcesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ResourcesConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateMaterials: Materials;
  createMaterials: Materials;
  updateCases: Cases;
  createCases: Cases;
  updateModules: Modules;
  createModules: Modules;
  updateExercises: Exercises;
  createExercises: Exercises;
  updateResources: Resources;
  createResources: Resources;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateMaterialsArgs = {
  relativePath: Scalars['String'];
  params: MaterialsMutation;
};


export type MutationCreateMaterialsArgs = {
  relativePath: Scalars['String'];
  params: MaterialsMutation;
};


export type MutationUpdateCasesArgs = {
  relativePath: Scalars['String'];
  params: CasesMutation;
};


export type MutationCreateCasesArgs = {
  relativePath: Scalars['String'];
  params: CasesMutation;
};


export type MutationUpdateModulesArgs = {
  relativePath: Scalars['String'];
  params: ModulesMutation;
};


export type MutationCreateModulesArgs = {
  relativePath: Scalars['String'];
  params: ModulesMutation;
};


export type MutationUpdateExercisesArgs = {
  relativePath: Scalars['String'];
  params: ExercisesMutation;
};


export type MutationCreateExercisesArgs = {
  relativePath: Scalars['String'];
  params: ExercisesMutation;
};


export type MutationUpdateResourcesArgs = {
  relativePath: Scalars['String'];
  params: ResourcesMutation;
};


export type MutationCreateResourcesArgs = {
  relativePath: Scalars['String'];
  params: ResourcesMutation;
};

export type DocumentMutation = {
  materials?: InputMaybe<MaterialsMutation>;
  cases?: InputMaybe<CasesMutation>;
  modules?: InputMaybe<ModulesMutation>;
  exercises?: InputMaybe<ExercisesMutation>;
  resources?: InputMaybe<ResourcesMutation>;
};

export type MaterialsObjectivesMutation = {
  objective?: InputMaybe<Scalars['String']>;
  explanation?: InputMaybe<Scalars['String']>;
};

export type MaterialsComponentsModuleMutation = {
  title?: InputMaybe<Scalars['String']>;
  filename?: InputMaybe<Scalars['String']>;
};

export type MaterialsComponentsCaseMutation = {
  title?: InputMaybe<Scalars['String']>;
  filename?: InputMaybe<Scalars['String']>;
};

export type MaterialsComponentsExerciseMutation = {
  title?: InputMaybe<Scalars['String']>;
  filename?: InputMaybe<Scalars['String']>;
};

export type MaterialsComponentsMutation = {
  module?: InputMaybe<MaterialsComponentsModuleMutation>;
  case?: InputMaybe<MaterialsComponentsCaseMutation>;
  exercise?: InputMaybe<MaterialsComponentsExerciseMutation>;
};

export type MaterialsMutation = {
  title?: InputMaybe<Scalars['String']>;
  linktitle?: InputMaybe<Scalars['String']>;
  published?: InputMaybe<Scalars['Boolean']>;
  type?: InputMaybe<Scalars['String']>;
  weight?: InputMaybe<Scalars['Float']>;
  objectives?: InputMaybe<Array<InputMaybe<MaterialsObjectivesMutation>>>;
  body?: InputMaybe<Scalars['String']>;
  components?: InputMaybe<Array<InputMaybe<MaterialsComponentsMutation>>>;
};

export type CasesSourcesMutation = {
  source_name?: InputMaybe<Scalars['String']>;
  source_url?: InputMaybe<Scalars['String']>;
  license?: InputMaybe<Scalars['String']>;
  attribution?: InputMaybe<Scalars['String']>;
};

export type CasesMutation = {
  style?: InputMaybe<Scalars['String']>;
  short?: InputMaybe<Scalars['String']>;
  reporter?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  public?: InputMaybe<Scalars['Boolean']>;
  sources?: InputMaybe<Array<InputMaybe<CasesSourcesMutation>>>;
  body?: InputMaybe<Scalars['String']>;
};

export type ModulesMutation = {
  title?: InputMaybe<Scalars['String']>;
  short?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  body?: InputMaybe<Scalars['String']>;
};

export type ExercisesMutation = {
  title?: InputMaybe<Scalars['String']>;
  short?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  body?: InputMaybe<Scalars['String']>;
};

export type ResourcesMutation = {
  title?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  summary?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['String']>;
};

export type MaterialsPartsFragment = { __typename?: 'Materials', title?: string | null, linktitle?: string | null, published?: boolean | null, type?: string | null, weight?: number | null, body?: string | null, objectives?: Array<{ __typename: 'MaterialsObjectives', objective?: string | null, explanation?: string | null } | null> | null, components?: Array<{ __typename: 'MaterialsComponentsModule', title?: string | null, filename?: { __typename?: 'Modules', title?: string | null, short?: string | null, tags?: Array<string | null> | null, body?: string | null, id: string } | null } | { __typename: 'MaterialsComponentsCase', title?: string | null, filename?: { __typename?: 'Cases', style?: string | null, short?: string | null, reporter?: string | null, tags?: Array<string | null> | null, public?: boolean | null, body?: string | null, id: string, sources?: Array<{ __typename: 'CasesSources', source_name?: string | null, source_url?: string | null, license?: string | null, attribution?: string | null } | null> | null } | null } | { __typename: 'MaterialsComponentsExercise', title?: string | null, filename?: { __typename?: 'Exercises', title?: string | null, short?: string | null, tags?: Array<string | null> | null, body?: string | null, id: string } | null } | null> | null };

export type CasesPartsFragment = { __typename?: 'Cases', style?: string | null, short?: string | null, reporter?: string | null, tags?: Array<string | null> | null, public?: boolean | null, body?: string | null, sources?: Array<{ __typename: 'CasesSources', source_name?: string | null, source_url?: string | null, license?: string | null, attribution?: string | null } | null> | null };

export type ModulesPartsFragment = { __typename?: 'Modules', title?: string | null, short?: string | null, tags?: Array<string | null> | null, body?: string | null };

export type ExercisesPartsFragment = { __typename?: 'Exercises', title?: string | null, short?: string | null, tags?: Array<string | null> | null, body?: string | null };

export type ResourcesPartsFragment = { __typename?: 'Resources', title?: string | null, date?: string | null, summary?: string | null, body?: string | null };

export type MaterialsQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type MaterialsQuery = { __typename?: 'Query', materials: { __typename?: 'Materials', id: string, title?: string | null, linktitle?: string | null, published?: boolean | null, type?: string | null, weight?: number | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, objectives?: Array<{ __typename: 'MaterialsObjectives', objective?: string | null, explanation?: string | null } | null> | null, components?: Array<{ __typename: 'MaterialsComponentsModule', title?: string | null, filename?: { __typename?: 'Modules', title?: string | null, short?: string | null, tags?: Array<string | null> | null, body?: string | null, id: string } | null } | { __typename: 'MaterialsComponentsCase', title?: string | null, filename?: { __typename?: 'Cases', style?: string | null, short?: string | null, reporter?: string | null, tags?: Array<string | null> | null, public?: boolean | null, body?: string | null, id: string, sources?: Array<{ __typename: 'CasesSources', source_name?: string | null, source_url?: string | null, license?: string | null, attribution?: string | null } | null> | null } | null } | { __typename: 'MaterialsComponentsExercise', title?: string | null, filename?: { __typename?: 'Exercises', title?: string | null, short?: string | null, tags?: Array<string | null> | null, body?: string | null, id: string } | null } | null> | null } };

export type MaterialsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<MaterialsFilter>;
}>;


export type MaterialsConnectionQuery = { __typename?: 'Query', materialsConnection: { __typename?: 'MaterialsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'MaterialsConnectionEdges', cursor: string, node?: { __typename?: 'Materials', id: string, title?: string | null, linktitle?: string | null, published?: boolean | null, type?: string | null, weight?: number | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, objectives?: Array<{ __typename: 'MaterialsObjectives', objective?: string | null, explanation?: string | null } | null> | null, components?: Array<{ __typename: 'MaterialsComponentsModule', title?: string | null, filename?: { __typename?: 'Modules', title?: string | null, short?: string | null, tags?: Array<string | null> | null, body?: string | null, id: string } | null } | { __typename: 'MaterialsComponentsCase', title?: string | null, filename?: { __typename?: 'Cases', style?: string | null, short?: string | null, reporter?: string | null, tags?: Array<string | null> | null, public?: boolean | null, body?: string | null, id: string, sources?: Array<{ __typename: 'CasesSources', source_name?: string | null, source_url?: string | null, license?: string | null, attribution?: string | null } | null> | null } | null } | { __typename: 'MaterialsComponentsExercise', title?: string | null, filename?: { __typename?: 'Exercises', title?: string | null, short?: string | null, tags?: Array<string | null> | null, body?: string | null, id: string } | null } | null> | null } | null } | null> | null } };

export type CasesQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type CasesQuery = { __typename?: 'Query', cases: { __typename?: 'Cases', id: string, style?: string | null, short?: string | null, reporter?: string | null, tags?: Array<string | null> | null, public?: boolean | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, sources?: Array<{ __typename: 'CasesSources', source_name?: string | null, source_url?: string | null, license?: string | null, attribution?: string | null } | null> | null } };

export type CasesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<CasesFilter>;
}>;


export type CasesConnectionQuery = { __typename?: 'Query', casesConnection: { __typename?: 'CasesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'CasesConnectionEdges', cursor: string, node?: { __typename?: 'Cases', id: string, style?: string | null, short?: string | null, reporter?: string | null, tags?: Array<string | null> | null, public?: boolean | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, sources?: Array<{ __typename: 'CasesSources', source_name?: string | null, source_url?: string | null, license?: string | null, attribution?: string | null } | null> | null } | null } | null> | null } };

export type ModulesQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ModulesQuery = { __typename?: 'Query', modules: { __typename?: 'Modules', id: string, title?: string | null, short?: string | null, tags?: Array<string | null> | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ModulesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ModulesFilter>;
}>;


export type ModulesConnectionQuery = { __typename?: 'Query', modulesConnection: { __typename?: 'ModulesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ModulesConnectionEdges', cursor: string, node?: { __typename?: 'Modules', id: string, title?: string | null, short?: string | null, tags?: Array<string | null> | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ExercisesQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ExercisesQuery = { __typename?: 'Query', exercises: { __typename?: 'Exercises', id: string, title?: string | null, short?: string | null, tags?: Array<string | null> | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ExercisesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ExercisesFilter>;
}>;


export type ExercisesConnectionQuery = { __typename?: 'Query', exercisesConnection: { __typename?: 'ExercisesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ExercisesConnectionEdges', cursor: string, node?: { __typename?: 'Exercises', id: string, title?: string | null, short?: string | null, tags?: Array<string | null> | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ResourcesQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ResourcesQuery = { __typename?: 'Query', resources: { __typename?: 'Resources', id: string, title?: string | null, date?: string | null, summary?: string | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ResourcesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ResourcesFilter>;
}>;


export type ResourcesConnectionQuery = { __typename?: 'Query', resourcesConnection: { __typename?: 'ResourcesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ResourcesConnectionEdges', cursor: string, node?: { __typename?: 'Resources', id: string, title?: string | null, date?: string | null, summary?: string | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const MaterialsPartsFragmentDoc = gql`
    fragment MaterialsParts on Materials {
  title
  linktitle
  published
  type
  weight
  objectives {
    __typename
    objective
    explanation
  }
  body
  components {
    __typename
    ... on MaterialsComponentsModule {
      title
      filename {
        ... on Modules {
          title
          short
          tags
          body
        }
        ... on Document {
          id
        }
      }
    }
    ... on MaterialsComponentsCase {
      title
      filename {
        ... on Cases {
          style
          short
          reporter
          tags
          public
          sources {
            __typename
            source_name
            source_url
            license
            attribution
          }
          body
        }
        ... on Document {
          id
        }
      }
    }
    ... on MaterialsComponentsExercise {
      title
      filename {
        ... on Exercises {
          title
          short
          tags
          body
        }
        ... on Document {
          id
        }
      }
    }
  }
}
    `;
export const CasesPartsFragmentDoc = gql`
    fragment CasesParts on Cases {
  style
  short
  reporter
  tags
  public
  sources {
    __typename
    source_name
    source_url
    license
    attribution
  }
  body
}
    `;
export const ModulesPartsFragmentDoc = gql`
    fragment ModulesParts on Modules {
  title
  short
  tags
  body
}
    `;
export const ExercisesPartsFragmentDoc = gql`
    fragment ExercisesParts on Exercises {
  title
  short
  tags
  body
}
    `;
export const ResourcesPartsFragmentDoc = gql`
    fragment ResourcesParts on Resources {
  title
  date
  summary
  body
}
    `;
export const MaterialsDocument = gql`
    query materials($relativePath: String!) {
  materials(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...MaterialsParts
  }
}
    ${MaterialsPartsFragmentDoc}`;
export const MaterialsConnectionDocument = gql`
    query materialsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: MaterialsFilter) {
  materialsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...MaterialsParts
      }
    }
  }
}
    ${MaterialsPartsFragmentDoc}`;
export const CasesDocument = gql`
    query cases($relativePath: String!) {
  cases(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...CasesParts
  }
}
    ${CasesPartsFragmentDoc}`;
export const CasesConnectionDocument = gql`
    query casesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: CasesFilter) {
  casesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...CasesParts
      }
    }
  }
}
    ${CasesPartsFragmentDoc}`;
export const ModulesDocument = gql`
    query modules($relativePath: String!) {
  modules(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ModulesParts
  }
}
    ${ModulesPartsFragmentDoc}`;
export const ModulesConnectionDocument = gql`
    query modulesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ModulesFilter) {
  modulesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ModulesParts
      }
    }
  }
}
    ${ModulesPartsFragmentDoc}`;
export const ExercisesDocument = gql`
    query exercises($relativePath: String!) {
  exercises(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ExercisesParts
  }
}
    ${ExercisesPartsFragmentDoc}`;
export const ExercisesConnectionDocument = gql`
    query exercisesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ExercisesFilter) {
  exercisesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ExercisesParts
      }
    }
  }
}
    ${ExercisesPartsFragmentDoc}`;
export const ResourcesDocument = gql`
    query resources($relativePath: String!) {
  resources(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ResourcesParts
  }
}
    ${ResourcesPartsFragmentDoc}`;
export const ResourcesConnectionDocument = gql`
    query resourcesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ResourcesFilter) {
  resourcesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ResourcesParts
      }
    }
  }
}
    ${ResourcesPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      materials(variables: MaterialsQueryVariables, options?: C): Promise<{data: MaterialsQuery, variables: MaterialsQueryVariables, query: string}> {
        return requester<{data: MaterialsQuery, variables: MaterialsQueryVariables, query: string}, MaterialsQueryVariables>(MaterialsDocument, variables, options);
      },
    materialsConnection(variables?: MaterialsConnectionQueryVariables, options?: C): Promise<{data: MaterialsConnectionQuery, variables: MaterialsConnectionQueryVariables, query: string}> {
        return requester<{data: MaterialsConnectionQuery, variables: MaterialsConnectionQueryVariables, query: string}, MaterialsConnectionQueryVariables>(MaterialsConnectionDocument, variables, options);
      },
    cases(variables: CasesQueryVariables, options?: C): Promise<{data: CasesQuery, variables: CasesQueryVariables, query: string}> {
        return requester<{data: CasesQuery, variables: CasesQueryVariables, query: string}, CasesQueryVariables>(CasesDocument, variables, options);
      },
    casesConnection(variables?: CasesConnectionQueryVariables, options?: C): Promise<{data: CasesConnectionQuery, variables: CasesConnectionQueryVariables, query: string}> {
        return requester<{data: CasesConnectionQuery, variables: CasesConnectionQueryVariables, query: string}, CasesConnectionQueryVariables>(CasesConnectionDocument, variables, options);
      },
    modules(variables: ModulesQueryVariables, options?: C): Promise<{data: ModulesQuery, variables: ModulesQueryVariables, query: string}> {
        return requester<{data: ModulesQuery, variables: ModulesQueryVariables, query: string}, ModulesQueryVariables>(ModulesDocument, variables, options);
      },
    modulesConnection(variables?: ModulesConnectionQueryVariables, options?: C): Promise<{data: ModulesConnectionQuery, variables: ModulesConnectionQueryVariables, query: string}> {
        return requester<{data: ModulesConnectionQuery, variables: ModulesConnectionQueryVariables, query: string}, ModulesConnectionQueryVariables>(ModulesConnectionDocument, variables, options);
      },
    exercises(variables: ExercisesQueryVariables, options?: C): Promise<{data: ExercisesQuery, variables: ExercisesQueryVariables, query: string}> {
        return requester<{data: ExercisesQuery, variables: ExercisesQueryVariables, query: string}, ExercisesQueryVariables>(ExercisesDocument, variables, options);
      },
    exercisesConnection(variables?: ExercisesConnectionQueryVariables, options?: C): Promise<{data: ExercisesConnectionQuery, variables: ExercisesConnectionQueryVariables, query: string}> {
        return requester<{data: ExercisesConnectionQuery, variables: ExercisesConnectionQueryVariables, query: string}, ExercisesConnectionQueryVariables>(ExercisesConnectionDocument, variables, options);
      },
    resources(variables: ResourcesQueryVariables, options?: C): Promise<{data: ResourcesQuery, variables: ResourcesQueryVariables, query: string}> {
        return requester<{data: ResourcesQuery, variables: ResourcesQueryVariables, query: string}, ResourcesQueryVariables>(ResourcesDocument, variables, options);
      },
    resourcesConnection(variables?: ResourcesConnectionQueryVariables, options?: C): Promise<{data: ResourcesConnectionQuery, variables: ResourcesConnectionQueryVariables, query: string}> {
        return requester<{data: ResourcesConnectionQuery, variables: ResourcesConnectionQueryVariables, query: string}, ResourcesConnectionQueryVariables>(ResourcesConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  