# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  materials(relativePath: String): Materials!
  materialsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: MaterialsFilter): MaterialsConnection!
  cases(relativePath: String): Cases!
  casesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CasesFilter): CasesConnection!
  modules(relativePath: String): Modules!
  modulesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ModulesFilter): ModulesConnection!
  exercises(relativePath: String): Exercises!
  exercisesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ExercisesFilter): ExercisesConnection!
  resources(relativePath: String): Resources!
  resourcesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ResourcesFilter): ResourcesConnection!
}

input DocumentFilter {
  materials: MaterialsFilter
  cases: CasesFilter
  modules: ModulesFilter
  exercises: ExercisesFilter
  resources: ResourcesFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Materials | Cases | Modules | Exercises | Resources

type MaterialsObjectives {
  objective: String
  explanation: String
}

union MaterialsComponentsModuleFilename = Modules

type MaterialsComponentsModule {
  title: String
  filename: MaterialsComponentsModuleFilename
}

union MaterialsComponentsCaseFilename = Cases

type MaterialsComponentsCase {
  title: String
  filename: MaterialsComponentsCaseFilename
}

union MaterialsComponentsExerciseFilename = Exercises

type MaterialsComponentsExercise {
  title: String
  filename: MaterialsComponentsExerciseFilename
}

union MaterialsComponents = MaterialsComponentsModule | MaterialsComponentsCase | MaterialsComponentsExercise

type Materials implements Node & Document {
  title: String
  linktitle: String
  published: Boolean
  type: String
  weight: Float
  objectives: [MaterialsObjectives]
  body: String
  components: [MaterialsComponents]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input MaterialsObjectivesFilter {
  objective: StringFilter
  explanation: StringFilter
}

input MaterialsComponentsModuleFilenameFilter {
  modules: ModulesFilter
}

input MaterialsComponentsModuleFilter {
  title: StringFilter
  filename: MaterialsComponentsModuleFilenameFilter
}

input MaterialsComponentsCaseFilenameFilter {
  cases: CasesFilter
}

input MaterialsComponentsCaseFilter {
  title: StringFilter
  filename: MaterialsComponentsCaseFilenameFilter
}

input MaterialsComponentsExerciseFilenameFilter {
  exercises: ExercisesFilter
}

input MaterialsComponentsExerciseFilter {
  title: StringFilter
  filename: MaterialsComponentsExerciseFilenameFilter
}

input MaterialsComponentsFilter {
  module: MaterialsComponentsModuleFilter
  case: MaterialsComponentsCaseFilter
  exercise: MaterialsComponentsExerciseFilter
}

input MaterialsFilter {
  title: StringFilter
  linktitle: StringFilter
  published: BooleanFilter
  type: StringFilter
  weight: NumberFilter
  objectives: MaterialsObjectivesFilter
  body: StringFilter
  components: MaterialsComponentsFilter
}

type MaterialsConnectionEdges {
  cursor: String!
  node: Materials
}

type MaterialsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [MaterialsConnectionEdges]
}

type CasesSources {
  source_name: String
  source_url: String
  license: String
  attribution: String
}

type Cases implements Node & Document {
  style: String
  short: String
  reporter: String
  tags: [String]
  public: Boolean
  sources: [CasesSources]
  body: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input CasesSourcesFilter {
  source_name: StringFilter
  source_url: StringFilter
  license: StringFilter
  attribution: StringFilter
}

input CasesFilter {
  style: StringFilter
  short: StringFilter
  reporter: StringFilter
  tags: StringFilter
  public: BooleanFilter
  sources: CasesSourcesFilter
  body: StringFilter
}

type CasesConnectionEdges {
  cursor: String!
  node: Cases
}

type CasesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CasesConnectionEdges]
}

type Modules implements Node & Document {
  title: String
  short: String
  tags: [String]
  body: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ModulesFilter {
  title: StringFilter
  short: StringFilter
  tags: StringFilter
  body: StringFilter
}

type ModulesConnectionEdges {
  cursor: String!
  node: Modules
}

type ModulesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ModulesConnectionEdges]
}

type Exercises implements Node & Document {
  title: String
  short: String
  tags: [String]
  body: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ExercisesFilter {
  title: StringFilter
  short: StringFilter
  tags: StringFilter
  body: StringFilter
}

type ExercisesConnectionEdges {
  cursor: String!
  node: Exercises
}

type ExercisesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ExercisesConnectionEdges]
}

type Resources implements Node & Document {
  title: String
  date: String
  summary: String
  body: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ResourcesFilter {
  title: StringFilter
  date: StringFilter
  summary: StringFilter
  body: StringFilter
}

type ResourcesConnectionEdges {
  cursor: String!
  node: Resources
}

type ResourcesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ResourcesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateMaterials(relativePath: String!, params: MaterialsMutation!): Materials!
  createMaterials(relativePath: String!, params: MaterialsMutation!): Materials!
  updateCases(relativePath: String!, params: CasesMutation!): Cases!
  createCases(relativePath: String!, params: CasesMutation!): Cases!
  updateModules(relativePath: String!, params: ModulesMutation!): Modules!
  createModules(relativePath: String!, params: ModulesMutation!): Modules!
  updateExercises(relativePath: String!, params: ExercisesMutation!): Exercises!
  createExercises(relativePath: String!, params: ExercisesMutation!): Exercises!
  updateResources(relativePath: String!, params: ResourcesMutation!): Resources!
  createResources(relativePath: String!, params: ResourcesMutation!): Resources!
}

input DocumentMutation {
  materials: MaterialsMutation
  cases: CasesMutation
  modules: ModulesMutation
  exercises: ExercisesMutation
  resources: ResourcesMutation
}

input MaterialsObjectivesMutation {
  objective: String
  explanation: String
}

input MaterialsComponentsModuleMutation {
  title: String
  filename: String
}

input MaterialsComponentsCaseMutation {
  title: String
  filename: String
}

input MaterialsComponentsExerciseMutation {
  title: String
  filename: String
}

input MaterialsComponentsMutation {
  module: MaterialsComponentsModuleMutation
  case: MaterialsComponentsCaseMutation
  exercise: MaterialsComponentsExerciseMutation
}

input MaterialsMutation {
  title: String
  linktitle: String
  published: Boolean
  type: String
  weight: Float
  objectives: [MaterialsObjectivesMutation]
  body: String
  components: [MaterialsComponentsMutation]
}

input CasesSourcesMutation {
  source_name: String
  source_url: String
  license: String
  attribution: String
}

input CasesMutation {
  style: String
  short: String
  reporter: String
  tags: [String]
  public: Boolean
  sources: [CasesSourcesMutation]
  body: String
}

input ModulesMutation {
  title: String
  short: String
  tags: [String]
  body: String
}

input ExercisesMutation {
  title: String
  short: String
  tags: [String]
  body: String
}

input ResourcesMutation {
  title: String
  date: String
  summary: String
  body: String
}

schema {
  query: Query
  mutation: Mutation
}
  