# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
  getDocumentFields: JSON!
  getMaterialsDocument(relativePath: String): MaterialsDocument!
  getMaterialsList(before: String, after: String, first: Float, last: Float, sort: String): MaterialsConnection!
  getCasesDocument(relativePath: String): CasesDocument!
  getCasesList(before: String, after: String, first: Float, last: Float, sort: String): CasesConnection!
  getModulesDocument(relativePath: String): ModulesDocument!
  getModulesList(before: String, after: String, first: Float, last: Float, sort: String): ModulesConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = MaterialsDocument | CasesDocument | ModulesDocument

type MaterialsObjectives {
  objective: String
  explanation: String
}

union MaterialsComponentsModuleFilenameDocument = ModulesDocument

type MaterialsComponentsModule {
  title: String
  filename: MaterialsComponentsModuleFilenameDocument
}

union MaterialsComponentsCaseFilenameDocument = CasesDocument

type MaterialsComponentsCase {
  title: String
  filename: MaterialsComponentsCaseFilenameDocument
}

union MaterialsComponents = MaterialsComponentsModule | MaterialsComponentsCase

type Materials {
  title: String
  linktitle: String
  type: String
  weight: Float
  objectives: [MaterialsObjectives]
  body: String
  components: [MaterialsComponents]
}

type MaterialsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Materials!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type MaterialsConnectionEdges {
  cursor: String
  node: MaterialsDocument
}

type MaterialsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [MaterialsConnectionEdges]
}

type Cases {
  style: String
  short: String
  reporter: String
  tags: [String]
  body: String
}

type CasesDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Cases!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type CasesConnectionEdges {
  cursor: String
  node: CasesDocument
}

type CasesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [CasesConnectionEdges]
}

type Modules {
  title: String
  short: String
  tags: [String]
  body: String
}

type ModulesDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Modules!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ModulesConnectionEdges {
  cursor: String
  node: ModulesDocument
}

type ModulesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ModulesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateMaterialsDocument(relativePath: String!, params: MaterialsMutation!): MaterialsDocument!
  createMaterialsDocument(relativePath: String!, params: MaterialsMutation!): MaterialsDocument!
  updateCasesDocument(relativePath: String!, params: CasesMutation!): CasesDocument!
  createCasesDocument(relativePath: String!, params: CasesMutation!): CasesDocument!
  updateModulesDocument(relativePath: String!, params: ModulesMutation!): ModulesDocument!
  createModulesDocument(relativePath: String!, params: ModulesMutation!): ModulesDocument!
}

input DocumentMutation {
  materials: MaterialsMutation
  cases: CasesMutation
  modules: ModulesMutation
}

input MaterialsObjectivesMutation {
  objective: String
  explanation: String
}

input MaterialsComponentsModuleMutation {
  title: String
  filename: String
}

input MaterialsComponentsCaseMutation {
  title: String
  filename: String
}

input MaterialsComponentsMutation {
  module: MaterialsComponentsModuleMutation
  case: MaterialsComponentsCaseMutation
}

input MaterialsMutation {
  title: String
  linktitle: String
  type: String
  weight: Float
  objectives: [MaterialsObjectivesMutation]
  body: String
  components: [MaterialsComponentsMutation]
}

input CasesMutation {
  style: String
  short: String
  reporter: String
  tags: [String]
  body: String
}

input ModulesMutation {
  title: String
  short: String
  tags: [String]
  body: String
}

schema {
  query: Query
  mutation: Mutation
}
  